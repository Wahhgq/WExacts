// -*- C++ -*-
// **Arithmetic Functions**
// **Author:** Wahh R. S.

// **Include Necessary Libraries**
#include <cmath>

namespace wrs
{
// **WRS Namespace**

/*
* **Function Name:**  bsqrt
* **Description:**  Calculates the square root of a number using the Babylonian method.
* **Input:**  double n - The number to calculate the square root of.
* **Output:** double - The square root of the input number.
*/
double bsqrt(double);

/*
* **Function Name:** gcd
* **Description:**  Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.
* **Input:**  int a, int b - The two integers to calculate the GCD of.
* **Output:** int - The GCD of the input integers.
*/
int gcd(int, int);

/*
* **Function Name:** convertToLowestTerms
* **Description:**  Converts a fraction to its lowest terms by dividing both the numerator and denominator by their greatest common divisor (GCD).
* **Input:**  int &numerator, int &denominator - The numerator and denominator of the fraction to convert.
* **Output:** bool - True if the conversion was successful, false if the denominator is zero.
*/
bool convertToLowestTerms(int &, int &);

/*
* **Function Name:** goldenSequence
* **Description:**  Calculates the nth Fibonacci number using a recursive approach.
* **Input:**  int n - The index of the Fibonacci number to calculate.
* **Output:** int - The nth Fibonacci number.
*/
int goldenSequence(int);

/*
* **Function Name:** isPrime
* **Description:**  Checks whether an integer is prime or not.
* **Input:**  int num - The integer to check for primality.
* **Output:** bool - True if the input integer is prime, false otherwise.
*/
bool isPrime(int);

/*
* **Function Name:** PAn
* **Description:**  Calculates the nth term of an arithmetic progression (A.P.).
* **Input:**  double A1 - The first term of the A.P.
*         int n - The index of the term to calculate.
*         double r - The common difference of the A.P.
* **Output:** double - The nth term of the A.P.
*/
double PAn(double A1, int, double);
// **Function Name:** maPA
// **Description:** Calculates the median of an arithmetic progression (A.P.).
// **Input:**  double Ak - The kth term of the A.P.
//         double r - The common difference of the A.P.
// **Output:** double - The median of the A.P.
double maPA(double, double);
/*
* **Function Name:** sumPA
* **Description:**  Calculates the sum of an arithmetic progression (A.P.).
* **Input:**  double A1 - The first term of the A.P.
*         int n - The index of the last term of the A.P.
*         double r - The common difference of the A.P.
* **Output:** double - The sum of the A.P.
*/
double sumPA(double, int, double);

/*
* **Function Name:** PGn
* **Description:**  Calculates the nth term of a geometric progression (G.P.).
* **Input:**  double A1 - The first term of the G.P.
*         int n - The index of the term to calculate.
*         double q - The common ratio of the G.P.
* **Output:** double - The nth term of the G.P.
*/
double PGn(double, int, double);

/*
* **Function Name:** modPG
* **Description:**  Calculates the mean of an infinite geometric progression (G.P.).
* **Input:**  double Ak - The kth term of the G.P.
*         double q - The common ratio of the G.P.
* **Output:** double - The mean of the infinite G.P.
*/
double modPG(double, double);
/*
// **Description:** Calculates the sum of an infinite geometric progression (G.P.).
// **Input:**  double A1 - The first term of the G.P.
//         int n - The index of the last term of the G.P.
//         double q - The common ratio of the G.P.
// **Output:** double - The sum of the infinite G.P.
double sumPGinf(double, int, double);

/*
* **Function Name:** prodPG
* **Description:**  Calculates the product of a finite geometric progression (G.P.).
* **Input:**  double A1 - The first term of the G.P.
*         int n - The index of the last term of the G.P.
*         double q - The common ratio of the G.P.
* **Output:** double - The product of the G.P.
*/
double prodPG(double, int, double);
} // namespace wrs

#endif /*ARITHMETIC_*/
